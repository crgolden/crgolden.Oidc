@page "{id:int}"
@using IdentityServer4.EntityFramework.Entities
@using Kendo.Mvc.UI
@model SecretsModel

@{
    ViewData["Title"] = $"Edit \"{Model.ApiResource.Name}\" Secrets";
}

<form method="post" id="apiResource">
    <input type="hidden" asp-for="ApiResource.Id" />
    @{
        var apiResourceSecrets = Model.Secrets.ToArray();
        for (var i = 0; i < apiResourceSecrets.Length; i++)
        {
            <input type="hidden" name="ApiResource.Secrets[@i].Id" value="@apiResourceSecrets[i].Id" />
            <input type="hidden" name="ApiResource.Secrets[@i].Type" value="@apiResourceSecrets[i].Type" />
            <input type="hidden" name="ApiResource.Secrets[@i].Value" value="@apiResourceSecrets[i].Value" />
            <input type="hidden" name="ApiResource.Secrets[@i].Description" value="@apiResourceSecrets[i].Description" />
            <input type="hidden" name="ApiResource.Secrets[@i].Expiration" value="@apiResourceSecrets[i].Expiration" />
        }
    }
    @(Html.Kendo().Grid(Model.Secrets)
          .Name("secretsGrid")
          .ToolBar(toolbar => toolbar.ClientTemplateId("secretsToolbarTemplate"))
          .Editable(editable => editable
              .Mode(GridEditMode.InCell)
              .DisplayDeleteConfirmation(false))
          .Columns(columns =>
          {
              columns.Bound(apiResourceSecret => apiResourceSecret.Type);
              columns.Bound(apiResourceSecret => apiResourceSecret.Value);
              columns.Command(command =>
              {
                  command.Custom("Edit").IconClass("k-icon k-i-edit").Click("secretEdit");
                  command.Destroy();
              }).Width(200);
          })
          .Sortable(sort => sort.AllowUnsort(false))
          .Filterable(filterable => filterable.Mode(GridFilterMode.Menu))
          .Pageable(pageable => pageable.ButtonCount(5))
          .DataSource(dataSource => dataSource
              .Ajax()
              .Model(model =>
              {
                  model.Field(apiResourceSecret => apiResourceSecret.Type).Editable(false);
                  model.Field(apiResourceSecret => apiResourceSecret.Value).Editable(false);
              })
              .Sort(sort => sort.Add(nameof(ApiSecret.Type)).Ascending())
              .Events(events => events.Change("secretsChange"))
              .PageSize(5)
              .Batch(true)
              .ServerOperation(false)))
    <hr />
    <div class="form-group">
        <h4>
            <button type="submit" title="Save API Resource Secrets" class="btn btn-primary">
                Save
            </button> |
            <a asp-page="../Details/Secrets" asp-route-id="@Model.ApiResource.Id" title="API Resource Secrets">
                <i class="fal fa-info-square"></i> Details
            </a> |
            <a asp-page="../Index" title="API Resources">
                <i class="fal fa-list"></i> List
            </a>
        </h4>
    </div>
</form>

@(Html.Kendo().Window()
      .Name("secretWindow")
      .Title("Secret")
      .Visible(false)
      .Modal(true)
      .Draggable(true)
      .Events(events => events.Close("secretWindowClose"))
      .Content(@<text>
                   <form id="secretForm">
                       <input id="ApiSecretUid" class="d-none"/>
                       <div class="form-group">
                           <label for="ApiSecretType">Type</label>
                           <input class="form-control" id="ApiSecretType" name="ApiSecretType" type="text" required>
                       </div>
                       <div class="form-group">
                           <label for="ApiSecretValue">Value</label>
                           <input class="form-control" id="ApiSecretValue" name="ApiSecretValue" type="text" required>
                       </div>
                       <div class="form-group">
                           <label for="ApiSecretExpiration">Expiration</label>
                           <br/>
                           @(Html.Kendo().DatePicker().Name("ApiSecretExpiration"))
                       </div>
                       <div class="form-group">
                           <label for="ApiSecretDescription">Description</label>
                           <textarea class="form-control" id="ApiSecretDescription" name="ApiSecretDescription"></textarea>
                       </div>
                       <hr/>
                       <button type="submit" class="k-button k-button-icontext k-primary k-grid-update">
                           <span class="k-icon k-i-check"></span>Save
                       </button>
                       <button type="reset" class="k-button k-button-icontext k-grid-cancel">
                           <span class="k-icon k-i-cancel"></span>Cancel
                       </button>
                   </form>
                </text>))

@section Scripts {
    <script id="secretsToolbarTemplate" type="text/x-kendo-template">
        <h4>
            <i class="fal fa-user-secret"></i> Secrets
            <button class="k-button k-button-icontext k-grid-add float-right">
                <span class="k-icon k-i-plus"></span>Add
            </button>
        </h4>
    </script>

    <script type="text/javascript">
        let secretAction;
        let secretWindow;
        let secretForm;
        let secretFormUid;
        let secretFormValidator;
        let secretsGrid;

        function secretsChange(event) {
            switch (event.action) {
                case 'add':
                    {
                        const dataItem = event.sender.at(event.index);
                        secretFormUid.val(dataItem.uid);
                        secretWindow.open().center();
                        secretAction = 'create';
                    }
                case 'remove':
                    {
                        secretInputsRefresh();
                    }
            }
        }

        const secretEdit = function (event) {
            event.preventDefault();
            secretFormReset();
            secretFormUpdate();
            secretWindow.open().center();
        };

        const secretWindowClose = function (event) {
            if (event.userTriggered) {
                removeGridSecret();
            }
            secretFormReset();
        };

        const secretInputsRefresh = function () {
            $('input[name^="ApiResource.Secrets"]').remove();
            $('#apiResource').append(secretsGrid.dataSource.data().reduce((inputs, secret, index) => {
                inputs.push($('<input>', {
                    type: 'hidden',
                    name: `ApiResource.Secrets[${index}].Id`,
                    value: secret.Id
                }));
                inputs.push($('<input>', {
                    type: 'hidden',
                    name: `ApiResource.Secrets[${index}].Description`,
                    value: secret.Description
                }));
                inputs.push($('<input>', {
                    type: 'hidden',
                    name: `ApiResource.Secrets[${index}].Value`,
                    value: secret.Value
                }));
                inputs.push($('<input>', {
                    type: 'hidden',
                    name: `ApiResource.Secrets[${index}].Expiration`,
                    value: secret.Expiration
                }));
                inputs.push($('<input>', {
                    type: 'hidden',
                    name: `ApiResource.Secrets[${index}].Type`,
                    value: secret.Type
                }));
                return inputs;
            }, []));
        };

        const secretFormReset = function () {
            secretFormValidator.resetForm();
            secretForm.reset();
            secretAction = undefined;
        };

        const secretFormSubmit = function () {
            updateGridSecret();
            secretInputsRefresh();
            secretFormReset();
            secretWindow.close();
        };

        const secretFormUpdate = function () {
            const row = $(event.toElement).closest('tr');
            const dataItem = secretsGrid.dataItem(row);
            secretFormUid.val(dataItem.uid);
            $('#ApiSecretDescription').val(dataItem.Description);
            $('#ApiSecretValue').val(dataItem.Value);
            $('#ApiSecretExpiration').val(dataItem.Expiration);
            $('#ApiSecretType').val(dataItem.Type);
        };

        const secretFormClose = function () {
            removeGridSecret();
            secretFormReset();
            secretWindow.close();
        };

        const removeGridSecret = function () {
            if (secretAction !== 'create') {
                return;
            }
            const uid = secretFormUid.val();
            const dataItem = secretsGrid.dataSource.getByUid(uid);
            secretsGrid.dataSource.remove(dataItem);
        };

        const updateGridSecret = function () {
            const uid = secretFormUid.val();
            const dataItem = secretsGrid.dataSource.getByUid(uid);
            dataItem.Description = $('#ApiSecretDescription').val();
            dataItem.Value = $('#ApiSecretValue').val();
            dataItem.Expiration = $('#ApiSecretExpiration').val();
            dataItem.Type = $('#ApiSecretType').val();
            secretsGrid.refresh();
        };

        $(function () {
            $.validator.setDefaults({
                errorClass: 'text-danger'
            });

            secretsGrid = $('#secretsGrid').getKendoGrid();
            secretWindow = $('#secretWindow').getKendoWindow();
            secretForm = document.getElementById('secretForm');
            secretFormUid = $('#ApiSecretUid');
            secretFormValidator = $(secretForm).validate({
                submitHandler: secretFormSubmit
            });
            $('#secretWindow button.k-grid-cancel').click(secretFormClose);
        });
    </script>

    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
