@page "{id:guid}"
@using Cef.OIDC.Models
@using Cef.OIDC.Relationships
@using Kendo.Mvc.UI
@model EditModel
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf

@{
    ViewData["Title"] = "Edit User";
}

<div class="row">
    <div class="col">
        <hr />
        <div class="row">
            <div class="col">
                <h2>
                    <i class="fal fa-user"></i> @ViewData["Title"]
                </h2>
            </div>
        </div>
    </div>
</div>
<div class="row">
    <div class="col">
        <hr />
        <form method="post">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="UserModel.Id" />
            @{
                var userRoles = Model.UserModel.UserRoles.ToArray();
                for (var i = 0; i < userRoles.Length; i++)
                {
                    <input type="hidden" name="UserModel.UserRoles[@i].RoleId" value="@userRoles[i].RoleId" />
                }
            }
            <div class="row">
                <div class="col">
                    <div class="form-group">
                        <label asp-for="UserModel.Email"></label>
                        <input asp-for="UserModel.Email" class="form-control" />
                        <span asp-validation-for="UserModel.Email" class="text-danger"></span>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <hr />
                    @(Html.Kendo().Grid(Model.Roles)
                          .Name("rolesGrid")
                          .ToolBar(toolbar => toolbar.ClientTemplate("<h4><i class='fal fa-id-badge'></i> Roles</h4>"))
                          .Columns(columns =>
                          {
                              columns.Select().Width(50);
                              columns.Bound(c => c.Name);
                          })
                          .Sortable(sort => sort.AllowUnsort(false))
                          .Filterable(filterable => filterable.Mode(GridFilterMode.Row))
                          .Pageable(pageable => pageable.ButtonCount(5))
                          .PersistSelection()
                          .Events(events => events
                              .Change("onRolesChange")
                              .DataBound("onRolesDataBound"))
                          .DataSource(dataSource => dataSource
                              .Ajax()
                              .Model(model => model.Id(p => p.Id))
                              .Sort(sort => sort.Add(nameof(Role.Name)).Ascending())
                              .PageSize(5)
                              .ServerOperation(false))
                          .ClientRowTemplate(
                              @"<tr data-uid='#:uid#' role='row'>" +
                              "<td role='gridcell'>" +
                              "<input class='k-checkbox' data-role='checkbox' type='checkbox' id='cb_#:data.uid#'>" +
                              "<label class='k-checkbox-label k-no-text' for='cb_#:data.uid#'>​</label>" +
                              "</td>" +
                              "<td role='gridcell'>" +
                              "<a href='/roles/details/#:data.Id#'>#:data.Name#</a>" +
                              "</td>" +
                              "</tr>"))
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <hr />
                    @(Html.Kendo().Grid(Model.Claims)
                          .Name("claimsGrid")
                          .ToolBar(toolbar =>
                          {
                              toolbar.Create();
                              toolbar.ClientTemplate(
                                  "<h4><i class='fal fa-id-card'></i> Claims" +
                                  "<button class='k-button k-button-icontext k-grid-add float-right'>" +
                                  "<span class='k-icon k-i-plus'></span>Add Claim" +
                                  "</button>" +
                                  "</h4>");
                          })
                          .Editable(editable => editable
                              .Mode(GridEditMode.PopUp)
                              .Window(window => window.Title("Claim")))
                          .Columns(columns =>
                          {
                              columns.Bound(c => c.ClaimType);
                              columns.Bound(c => c.ClaimValue);
                              columns.Command(command =>
                              {
                                  command.Edit();
                                  command.Destroy();
                              }).Width(250);
                          })
                          .Sortable(sort => sort.AllowUnsort(false))
                          .Filterable(filterable => filterable.Mode(GridFilterMode.Row))
                          .Pageable(pageable => pageable.ButtonCount(5))
                          .PersistSelection()
                          .DataSource(dataSource => dataSource
                              .Ajax()
                              .Model(model =>
                              {
                                  model.Id(p => p.Id);
                                  model.Field(p => p.Id).Editable(false);
                                  model.Field(p => p.UserId).DefaultValue(Model.UserModel.Id).Editable(false);
                              })
                              .Events(events => events.Error("claimsError"))
                              .Create(create => create.Url($"/users/edit/{Model.UserModel.Id}?handler=CreateUserClaim"))
                              .Update(update => update.Url($"/users/edit/{Model.UserModel.Id}?handler=EditUserClaim"))
                              .Destroy(destroy => destroy.Url($"/users/edit/{Model.UserModel.Id}?handler=DeleteUserClaim"))
                              .Sort(sort => sort.Add(nameof(UserClaim.ClaimType)).Ascending())
                              .PageSize(5)
                              .ServerOperation(false)))
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <div class="form-group">
                        <hr />
                        <h4>
                            <button type="submit" class="btn btn-primary" title="Save User">
                                Save
                            </button> |
                            <a asp-page="./Details" asp-route-id="@Model.UserModel.Id" title="User Details">
                                <i class="fal fa-info-square"></i> Details
                            </a> |
                            <a asp-page="./Index" title="Users">
                                <i class="fal fa-list"></i> List
                            </a>
                        </h4>
                    </div>
                </div>
            </div>
        </form>
        <hr />
    </div>
</div>

@section Scripts {
    <script type="text/javascript">
        function onRolesChange(event) {
            $('input[name^="UserModel.UserRoles"]').remove();
            $('form').append(event.sender.selectedKeyNames().map((roleId, index) => $('<input>',
                {
                    type: 'hidden',
                    name: `UserModel.UserRoles[${index}].RoleId`,
                    value: roleId
                })));
        }

        function onRolesDataBound(event) {
            var userRoles = $('input[name^="UserModel.UserRoles"]')
                .toArray()
                .map(userRole => userRole.value);
            event.sender.items()
                .toArray()
                .filter(item => userRoles.some(userRole => userRole === event.sender.dataItem(item).Id))
                .forEach(item => event.sender.select(item));
        }

        function claimsError(event) {
            alert(event.xhr.responseText);
        }

        $(function () {
            const requestVerificationToken = '@Xsrf.GetAndStoreTokens(HttpContext).RequestToken';
            const beforeSend = req => req.setRequestHeader('RequestVerificationToken', requestVerificationToken);
            const grid = $('#claimsGrid').getKendoGrid();
            grid.dataSource.transport.options.create.beforeSend = beforeSend;
            grid.dataSource.transport.options.update.beforeSend = beforeSend;
            grid.dataSource.transport.options.destroy.beforeSend = beforeSend;
        });
    </script>
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
